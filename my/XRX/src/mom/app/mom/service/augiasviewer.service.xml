<xrx:service xmlns:xrx="http://www.monasterium.net/NS/xrx">
  <xrx:id>tag:www.monasterium.net,2011:/mom/service/augiasviewer</xrx:id>
  <xrx:title>
    <xrx:i18n>
      <xrx:key></xrx:key>
      <xrx:default></xrx:default>
    </xrx:i18n>
  </xrx:title>
  <xrx:subtitle></xrx:subtitle>
  <xrx:description></xrx:description>
  <xrx:author>jochen.graf@uni-koeln.de</xrx:author>
  <xrx:licence>
This is a component file of the VdU Software for a Virtual Research Environment for the handling of Medieval charters.

As the source code is available here, it is somewhere between an alpha- and a beta-release, may be changed without any consideration of backward compatibility of other parts of the system, therefore, without any notice.

This file is part of the VdU Virtual Research Environment Toolkit (VdU/VRET).

The VdU/VRET is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

VdU/VRET is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with VdU/VRET.  If not, see http://www.gnu.org/licenses.
  </xrx:licence>
  <xrx:init>
   <xrx:processor>
     <xrx:translateflag>true</xrx:translateflag>
   </xrx:processor>
  </xrx:init>
  <xrx:body>
  {
  
	(: get request parameters :)
	let $charter-id := request:get-parameter('charter-id', '')
	let $fond-id := request:get-parameter('fond-id', '')
	let $collection-id := request:get-parameter('collection-id', '')
	let $archive-id := request:get-parameter('archive-id', '')
	let $lang := request:get-parameter('lang', '')
	
	let $collection-or-fond := 
	   if(request:get-parameter('collection-id', '') != '') then 'collection'
	   else 'fond'
	
	let $atom-id := 
	   if($collection-or-fond = 'fond') then metadata:atomid('charter', ($archive-id,$fond-id,$charter-id))
	   else metadata:atomid('charter', ($collection-id,$charter-id))
	
	(: init metadata database collections :)
	let $metadata-charter-collection := 
	    if($collection-or-fond = 'fond') then metadata:base-collection('charter', ($archive-id,$fond-id), 'public')
	    else metadata:base-collection('charter', $collection-id, 'public')
	let $metadata-fond-collection := 
	    metadata:base-collection('fond', ($archive-id,$fond-id), 'public')
  let $metadata-collection-collection := 
      metadata:base-collection('collection', $collection-id, 'public')
	let $metadata-archive-collection := 
	    metadata:base-collection('archive', $archive-id, 'public')
	
	(: get charter :)
	let $charter := root($metadata-charter-collection//atom:id[.=$atom-id])//cei:text
	let $idno := $charter//cei:body/cei:idno/text()
	let $img-names := 
	    for $name in $charter//cei:graphic/@url/string()
	    order by $name
	    return $name
	let $date := ($charter//cei:issued/cei:date/text()|$charter//cei:issued/cei:dateRange/text())[1]
	let $img-count := count($img-names)
	    
	(: get fond information :)
	let $fond-entry := $metadata-fond-collection//cei:cei
	let $fond-name := normalize-space(($fond-entry//cei:provenance/child::text())[1])
	
	(: get collection information :)
	let $collection-entry := $metadata-collection-collection//cei:cei
	let $collection-name := normalize-space(($collection-entry//cei:provenance/child::text())[1])
	let $country-name := normalize-space(($collection-entry//cei:country/child::text())[1])
	
	(: get image information :)
  let $server := 
      if($collection-or-fond = 'fond') then $metadata-fond-collection/xrx:preferences/xrx:param[@name='image-server-base-url']/text()
      else normalize-space(($collection-entry//cei:image_server_address/text())[1])
  let $folder := 
      if($collection-or-fond = 'fond') then ''
      else normalize-space(($collection-entry//cei:image_server_folder/text())[1])
	
	(: get archive information :)
	let $archive-entry := $metadata-archive-collection//eag:eag
	let $archive-name := $archive-entry//eag:autform/text()
	
	
	return

	<data type='array' name='root'>
	    {
	    if($collection-or-fond = 'fond') then
	    (
	    <lbl1><xrx:i18n><xrx:key>archive</xrx:key><xrx:default>Archive</xrx:default></xrx:i18n>:</lbl1>,
	    <lbl2><xrx:i18n><xrx:key>fond</xrx:key><xrx:default>Fond</xrx:default></xrx:i18n>:</lbl2>,
	    <lbl3><xrx:i18n><xrx:key>idno</xrx:key><xrx:default>Signature</xrx:default></xrx:i18n>:</lbl3>,
	    <lbl4><xrx:i18n><xrx:key>date</xrx:key><xrx:default>Date</xrx:default></xrx:i18n>:</lbl4>
	    )
	    else
	    (
      <lbl1><xrx:i18n><xrx:key>country</xrx:key><xrx:default>Country</xrx:default></xrx:i18n>:</lbl1>,
      <lbl2><xrx:i18n><xrx:key>collection</xrx:key><xrx:default>Collection</xrx:default></xrx:i18n>:</lbl2>,
      <lbl3><xrx:i18n><xrx:key>idno</xrx:key><xrx:default>Signature</xrx:default></xrx:i18n>:</lbl3>,
      <lbl4><xrx:i18n><xrx:key>date</xrx:key><xrx:default>Date</xrx:default></xrx:i18n>:</lbl4>	 
      )   
	    }
	    <key>false</key>
	    <ismatricula>false</ismatricula>
	    <logo>/augias/design/momlogo.png</logo>
	    <count>{ $img-count }</count>
	    <title>Urkunde</title>
	    <showminiwindow>false</showminiwindow>
	    <maxscale>4</maxscale>
	    <listtype>labels</listtype>
	    <directory></directory>
	    <data type='array' name='controls'>
				<btnPrevious><xrx:i18n><xrx:key>previous-image</xrx:key><xrx:default>previous image</xrx:default></xrx:i18n></btnPrevious>
				<btnNext><xrx:i18n><xrx:key>next-image</xrx:key><xrx:default>next image</xrx:default></xrx:i18n></btnNext>
				<btnMoveLeft><xrx:i18n><xrx:key>move-to-the-left</xrx:key><xrx:default>move to the left</xrx:default></xrx:i18n></btnMoveLeft>
				<btnMoveRight><xrx:i18n><xrx:key>move-to-the-right</xrx:key><xrx:default>move to the right</xrx:default></xrx:i18n></btnMoveRight>
				<btnMoveUp><xrx:i18n><xrx:key>move-upwards</xrx:key><xrx:default>move upwards</xrx:default></xrx:i18n></btnMoveUp>
				<btnMoveDown><xrx:i18n><xrx:key>move-downwards</xrx:key><xrx:default>move downwards</xrx:default></xrx:i18n></btnMoveDown>
				<btnReset><xrx:i18n><xrx:key>reset-image-size</xrx:key><xrx:default>reset image size</xrx:default></xrx:i18n></btnReset>
				<btnSmaller><xrx:i18n><xrx:key>zoom-out</xrx:key><xrx:default>zoom out</xrx:default></xrx:i18n></btnSmaller>
				<btnBigger><xrx:i18n><xrx:key>zoom-in</xrx:key><xrx:default>zoom in</xrx:default></xrx:i18n></btnBigger>
				<barSize><xrx:i18n><xrx:key>adjust-size</xrx:key><xrx:default>adjust size</xrx:default></xrx:i18n></barSize>
				<btnRotateLeft><xrx:i18n><xrx:key>anti-clockwise-rotation</xrx:key><xrx:default>anti-clockwise rotation</xrx:default></xrx:i18n></btnRotateLeft>
				<btnRotateRight><xrx:i18n><xrx:key>clockwise-rotation</xrx:key><xrx:default>clockwise rotation</xrx:default></xrx:i18n></btnRotateRight>
				<btnShowList><xrx:i18n><xrx:key>show-hide-menu</xrx:key><xrx:default>show / hide menu</xrx:default></xrx:i18n></btnShowList>
				<barBrightness><xrx:i18n><xrx:key>adjust-brightness</xrx:key><xrx:default>adjust brightness</xrx:default></xrx:i18n></barBrightness>
				<barContrast><xrx:i18n><xrx:key>adjust-contrast</xrx:key><xrx:default>adjust contrast</xrx:default></xrx:i18n></barContrast>
			</data>
	    <data type='array' name='images'>
	    {
	        for $name at $pos in $img-names
	        let $url := 
	         if(contains($name, '/')) then $name
	         else if(starts-with($server, 'http:')) then concat($server, '/', $name)
	         else concat('http://', $server, '/', $folder, '/', $name)
	        let $readable-name := replace($name, "([^_]+)(_|-)([^_]+)(_|-)(.*)", "$5")
	        return
	        if($collection-or-fond = 'fond') then
	        <data type="array" name="{ $pos }">
	            <file>{ $url }</file>
	            <title>{ $readable-name }</title>
	            <txt1>{ $archive-name }</txt1>
	            <txt2>{ $fond-name }</txt2>
	            <txt3>{ $idno }</txt3>
	            <txt4>{ $date }</txt4>
	        </data>
	        else
	        <data type="array" name="{ $pos }">
              <file>{ $url }</file>
              <title>{ $readable-name }</title>
              <txt1>{ $country-name }</txt1>
              <txt2>{ $collection-name }</txt2>
              <txt3>{ $idno }</txt3>
              <txt4>{ $date }</txt4>
          </data>
	    }
	    </data>
	</data>

	}
	</xrx:body>
</xrx:service>