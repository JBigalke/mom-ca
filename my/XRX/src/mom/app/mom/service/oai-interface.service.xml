<xrx:service xmlns:xrx="http://www.monasterium.net/NS/xrx">
    <xrx:id>tag:www.monasterium.net,2011:/mom/service/oai-interface</xrx:id>
    <xrx:title>
        <xrx:i18n>
            <xrx:key/>
            <xrx:default/>
        </xrx:i18n>
    </xrx:title>
    <xrx:subtitle/>
    <xrx:description/>
    <xrx:author>andre.streicher@uni-koeln.de</xrx:author>
    <xrx:licence>
This is a component file of the VdU Software for a Virtual Research Environment for the handling of Medieval charters.

As the source code is available here, it is somewhere between an alpha- and a beta-release, may be changed without any consideration of backward compatibility of other parts of the system, therefore, without any notice.

This file is part of the VdU Virtual Research Environment Toolkit (VdU/VRET).

The VdU/VRET is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

VdU/VRET is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with VdU/VRET.  If not, see http://www.gnu.org/licenses.
  </xrx:licence>
    <xrx:init>
        <xrx:processor>
            <xrx:translateflag>false</xrx:translateflag>
            <xrx:serializeas>media-type=text/xml omit-xml-declaration=no indent=no</xrx:serializeas>
        </xrx:processor>
    </xrx:init>
    <xrx:body>
	  {
	  (: extract parameters :)
	  let $object-id := xmldb:encode($xrx:tokenized-uri[1])
	  (: define context of export - archive, collection :)
	  let $context := platform-oai:get-context($object-id)
	  let $oai-path := 
	  		if($context = 'archive')then
	  			concat(conf:param('data-db-base-uri'), 'metadata.archive.public/', $object-id, '/')
	  		else if($context = 'collection')then
	  	    	concat(conf:param('data-db-base-uri'), 'metadata.collection.public/', $object-id, '/')
	  	    else()
	  let $data-provider-overview := 
	  			if($context = 'archive' or $context = 'collection')then
	  				doc(concat($oai-path, 'oai.xml'))//atom:entry
	  			else()
	  (: define the ID(s) of the resource(s) :)
	  let $resource-IDs := 
	                       if($context = 'collection')then
	                           $object-id
	                       else if($context = 'archive')then
	                           platform-oai:get-fonds($data-provider-overview, $object-id)
	                       else()
	  (: define base collection path(es) :)                     
	  let $public-base-collection := 
	           		if($context = 'collection')then
					           concat(
						           'metadata.charter.public/',
						           $resource-IDs,
						           '/'
						           )
		           else if($context = 'archive')then    
		               for $resource-ID in $resource-IDs
		                   return
		                   concat(
			                   'metadata.charter.public/',
			                   $object-id,
			                   '/',
			                   $resource-ID,
			                   '/'
			                   )
		          else()
	  (: define base- URL for OAI- Interface :) 
	  let $base-URL := request:get-url()
	  let $function-pointer := util:function(QName("http://www.monasterium.net/NS/platform-oai","platform-oai:transform"), 3)
	  (: get OAI- data :)
	  let $oai-response := 
	             if($context = 'noMatch')then
	             	platform-oai:error-message($base-URL)
	             else 
	             	oaiinterface:main($public-base-collection, $base-URL, $function-pointer)
	  return
	  	$oai-response
	  }
	</xrx:body>
</xrx:service>